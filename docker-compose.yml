# ==============================================================================
#  docker-compose.yml  --  Cloud Compliance Platform: Microservices Orchestration
# ==============================================================================
#  Author: Reginald
#  Last updated: 18th June 2025
#
#  DESCRIPTION:
#    - Defines the complete multi-stage, event-driven cloud compliance pipeline.
#    - Each phase is represented as a Docker service; all event-driven dependencies
#      (RabbitMQ, Qdrant, Ollama) are configured and documented for onboarding clarity.
#    - Every microservice explicitly declares dependencies, ports, and persistent data mounts.
#
#  HOW TO USE:
#    - Place this file at the root level alongside all pipeline directories.
#    - Bring up the stack:   docker compose up --build
#    - Tear down and remove:  docker compose down
#    - RabbitMQ admin:        http://localhost:15672  (admin/password)
#    - React UI:              http://localhost:3000
# ==============================================================================
version: "3.9"

services:
  # === Phase 1: Frontend UI (React, Vite) ===
  compliance-ui:
    build: ./cloud-compliance-ui           # Folder containing your UI code and Dockerfile
    ports:
      - "3000:3000"                        # Expose React dev server on host port 3000
    depends_on:
      - cloud-compliance-api               # UI should only start after backend API is ready

   # === Phase 2: API Gateway / MCP Layer (Flask) ===
  cloud-compliance-api:
    build: ./cloud-compliance-api          # Your main backend API folder/Dockerfile
    ports:
      - "5000:5000"                        # Expose Flask API on host port 5000
    depends_on:
      - rule-ingestion                     # API depends on rule ingestion
      - rabbitmq                           # and on RabbitMQ for event-driven comms

  # === Phase 3: Rule Ingestion Pipeline ===
  rule-ingestion:
    build: ./cloud-compliance-rule-ingestion
    ports:
      - "5010:5010"                        # Rule ingestion microservice, port 5010
    depends_on:
      - rabbitmq                           # Wait for RabbitMQ before starting

  # === Phase 4: Framework Validation Pipeline ===
  framework-validation:
    build: ./cloud-compliance-framework-validator
    ports:
      - "5020:5020"                        # Framework validator microservice, port 5020
    depends_on:
      - rabbitmq                           # Wait for RabbitMQ before starting

  # === Phase 5: IaC Analysis Pipeline ===
  iac-analysis:
    build: ./cloud-compliance-iac-analysis
    ports:
      - "5030:5030"                        # IaC analysis/remediation, port 5030
    depends_on:
      - rabbitmq                           # Wait for RabbitMQ before starting

  # === Phase 6: IAM Audit Pipeline ===
  iam-audit:
    build: ./cloud-compliance-iam-audit
    ports:
      - "5040:5040"                        # IAM auditing, port 5040
    depends_on:
      - rabbitmq                           # Wait for RabbitMQ before starting

  # === Phase 7: Delta Analysis Pipeline (PDF exports persistent) ===
  delta-analysis:
    build: ./cloud-compliance-delta-analysis
    ports:
      - "5050:5050"                        # Delta reporting, port 5050
    volumes:
      - ./cloud-compliance-delta-analysis/reports:/app/reports  # PDF exports persist on host
    depends_on:
      - rabbitmq                           # Wait for RabbitMQ before starting

  # === Qdrant: Vector Database for LLM/semantic search ===
  qdrant:
    image: qdrant/qdrant
    ports:
      - "6333:6333"                        # Vector DB for LLM embeddings (Qdrant default port)

  # === Ollama: Local LLM for rule extraction & reasoning ===
  ollama:
    image: ollama/ollama
    ports:
      - "11434:11434"                      # Ollama model server

  # === RabbitMQ: Event Bus for real-time pipeline coordination ===
  rabbitmq:
    image: rabbitmq:4.1.1-management-alpine
    ports:
      - "5672:5672"                        # RabbitMQ broker port (used by your pipelines)
      - "15672:15672"                      # RabbitMQ management UI (http://localhost:15672)
    environment:
      RABBITMQ_DEFAULT_USER: admin         # Universal credentials for all microservices
      RABBITMQ_DEFAULT_PASS: password

  # === Phase 8: Dashboard Backend (Flask + SocketIO + RabbitMQ integration) ===
  cloud-compliance-dashboard:
    build: ./cloud-compliance-dashboard
    ports:
      - "5001:5000"                        # Dashboard backend, port 5001 (mapped to container 5000)
    depends_on:
      - rabbitmq                           # Wait for RabbitMQ before starting
    environment:
      - FLASK_ENV=development              # Flask development mode (change for prod)


# ==============================================================================
#  NOTES & ONBOARDING BEST PRACTICES:
#    - All microservices that publish/consume events wait for RabbitMQ.
#    - Use 'docker compose up --build' for clean initial builds.
#    - Each build context path (./cloud-compliance-*) must exist at root.
#    - Persistent volumes (e.g., delta-analysis reports) mounted for export.
#    - For production, review exposed ports and secure credentials.
#    - Add new microservices by copying the established pattern (build/ports/depends_on).
#    - Healthchecks can be added for critical uptime assurance.
#    - All services are addressable by their service name in Docker's internal DNS.
# ==============================================================================