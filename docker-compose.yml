# ==============================================================================
#  docker-compose.yml  --  Cloud Compliance Platform: Microservices Orchestration
# ==============================================================================
#  Author: Reginald
#  Last updated: 20th June 2025
#
#  DESCRIPTION:
#    - Defines the complete multi-stage, event-driven cloud compliance pipeline.
#    - Each phase is represented as a Docker service; all event-driven dependencies
#      (RabbitMQ, Qdrant, Ollama) are configured and documented for onboarding clarity.
#    - Every microservice explicitly declares dependencies, ports, and persistent data mounts.
#
#  HOW TO USE:
#    - Place this file at the root level alongside all pipeline directories.
#    - Bring up the stack:   docker compose up --build
#    - Tear down and remove:  docker compose down -v
#    - RabbitMQ admin:        http://localhost:15672  (admin/password)
#    - React UI:              http://localhost:3000
# ==============================================================================

services:
  # === Phase 1: Frontend UI (React, Vite) ===
  compliance-ui:
    build: ./cloud-compliance-ui    # Folder containing your UI code and Dockerfile
    ports:
      - "3000:3000"        # React development server
      - "4173:4173"        # React preview server (optional)
    depends_on:
      - cloud-compliance-api        # UI should only start after backend API is ready

  # === Phase 2: API Gateway / MCP Layer (Flask) ===
  cloud-compliance-api:
    build: ./cloud-compliance-api   # Your main backend API folder/Dockerfile
    ports:
      - "5000:5000"                 # Expose Flask API on host port 5000
    depends_on:
      - rule-ingestion               # API depends on rule ingestion
      - rabbitmq                    # and on RabbitMQ for event-driven comms
      - ollama
      - qdrant
    environment:
      - OLLAMA_URL=http://ollama:11434/api/generate
      - QDRANT_URL=http://qdrant:6333
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=password

  # === Phase 3: Rule Ingestion Pipeline ===
  rule-ingestion:
    build: ./cloud-compliance-rule-ingestion
    ports:
      - "5010:5010"                         # Rule ingestion microservice, port 5010
    depends_on:
      - rabbitmq                     # Wait for RabbitMQ before starting
      - ollama
      - qdrant
    environment:
      - OLLAMA_URL=http://ollama:11434/api/generate
      - QDRANT_URL=http://qdrant:6333
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=password

  # === Phase 4: Framework Validation Pipeline ===
  framework-validation:
    build: ./cloud-compliance-framework-validator
    ports:
      - "5020:5020"                            # Framework validator microservice, port 5020
    depends_on:
      - rabbitmq                          # Wait for RabbitMQ before starting
      - qdrant
    environment:
      - QDRANT_URL=http://qdrant:6333
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=password

  # === Phase 5: IaC Analysis Pipeline ===
  iac-analysis:
    build: ./cloud-compliance-iac-analysis
    ports:
      - "5030:5030"
    depends_on:
      - rabbitmq
      - qdrant
    environment:
      - QDRANT_URL=http://qdrant:6333
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=password

  # === Phase 6: IAM Audit Pipeline ===
  iam-audit:
    build: ./cloud-compliance-iam-audit
    ports:
      - "5040:5040"
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=password

  # === Phase 7: Delta Analysis Pipeline (PDF exports persistent) ===
  delta-analysis:
    build: ./cloud-compliance-delta-analysis
    ports:
      - "5050:5050"
    volumes:
      - ./cloud-compliance-delta-analysis/reports:/app/reports  # Persist PDF reports outside container
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=password

  # === Qdrant: Vector Database for LLM/semantic search ===
  qdrant:
    image: qdrant/qdrant
    ports:
      - "6333:6333"                   # Vector DB for LLM embeddings (Qdrant default port)

  # === Ollama: Local LLM for rule extraction & reasoning ===
  ollama:
    image: ollama/ollama
    ports:
      - "11434:11434"                 # Ollama model server
    volumes:
      # Persist Ollama's models and SSH keys outside the container to host directory for
      # model visibility and persistence across container restarts.
      - ./ollama-data:/root/.ollama
    # Optional: add restart policy for resilience
    restart: unless-stopped

  # === RabbitMQ: Event Bus for real-time pipeline coordination ===
  rabbitmq:
    image: rabbitmq:4.1.1-management-alpine
    ports:
      - "5672:5672"     # Broker port for microservices
      - "15672:15672"   # Management UI port (http://localhost:15672)
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password

  # === Phase 8: Dashboard Backend (Flask + SocketIO + RabbitMQ) ===
  cloud-compliance-dashboard:
    build: ./cloud-compliance-dashboard
    ports:
      - "5001:5000"    # Map host 5001 to container 5000
    depends_on:
      - rabbitmq
    environment:
      - FLASK_ENV=development
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=password

# ==============================================================================
# NOTES:
# - All microservices that publish/consume events depend on RabbitMQ.
# - Use 'docker compose up --build' for clean builds.
# - Ensure the build paths (./cloud-compliance-*) exist relative to this file.
# - Ollama volume './ollama-data:/root/.ollama' must be created on the host for model persistence.
# - Secure credentials and ports before production deployment.
# - Add healthchecks for critical services in production.
# - All service names resolve in Docker's internal network.
# ==============================================================================

